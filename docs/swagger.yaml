swagger: '2.0'
basePath: /api
paths:
  /models:
    post:
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/TrainResult'
        '400':
          description: Invalid input
      summary: Creates and trains a model with given model class and hyperparameters
      operationId: post_model_list
      parameters:
        - name: payload
          required: true
          in: body
          schema:
            $ref: '#/definitions/TrainMetadata'
      tags:
        - models
    get:
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ModelMetadata'
      summary: Gets a list of all the models
      operationId: get_model_list
      tags:
        - models
  /models/{model_id}:
    parameters:
      - in: path
        description: The model ID
        name: model_id
        required: true
        type: string
    delete:
      responses:
        '204':
          description: Success
        '400':
          description: Invalid input
        '404':
          description: Model does not exist
      summary: Deletes a model with a given ID
      operationId: delete_model
      tags:
        - models
    get:
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ModelMetadata'
        '400':
          description: Invalid input
        '404':
          description: Model does not exist
      summary: Gets a model with a given ID
      operationId: get_model
      tags:
        - models
  /models/{model_id}/predict:
    parameters:
      - in: path
        description: The model ID
        name: model_id
        required: true
        type: string
    post:
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PredictionResult'
        '400':
          description: Invalid input
        '404':
          description: Model does not exist
      summary: Predicts the success of an applicant using a given model
      operationId: post_model_prediction
      parameters:
        - name: payload
          required: true
          in: body
          schema:
            $ref: '#/definitions/Applicant'
      tags:
        - models
info:
  title: Team SWEg API
  version: '1.0'
  description: API endpoints for a microservice that predicts potential applicant success using machine learning.
  contact:
    name: Team SWEg (Eric Fan, Jihyo Chung, Kyungmin Kim, Leo Jung, Victor Waddell)
    email: null
    url: https://github.com/CMU-313/fall-22-hw4-team-sweg
produces:
  - application/json
consumes:
  - application/json
tags:
  - name: models
    description: API endpoints to manage machine learning models
definitions:
  TrainMetadata:
    required:
      - k
      - model_class
      - num_features
      - score_func
    properties:
      model_class:
        type: string
        title: Model class
        description: The name of the model class
        example: logistic
        enum:
          - logistic
          - linear
      score_func:
        type: string
        title: Score function
        description: The score function to use to select features
        example: f_regression
        enum:
          - f_regression
          - mutual_info_regression
          - f_classif
          - mutual_info_classif
          - chi2
      num_features:
        type: integer
        title: Number of features
        description: The number of features to select for training
        minimum: 1
        maximum: 51
      k:
        type: integer
        title: K-fold cross validation
        description: Value used in K-fold cross validation
        minimum: 2
    type: object
  TrainResult:
    required:
      - model_id
      - train_acc
    properties:
      model_id:
        type: string
        title: Model ID
        description: The ID of the created model
      train_acc:
        type: number
        title: Training accuracy
        description: Model accuracy tested on training set
        minimum: 0
        maximum: 1
      valid_acc:
        type: number
        title: Validation accuracy
        description: Model accuracy tested on validation set
        minimum: 0
        maximum: 1
    type: object
  ModelMetadata:
    required:
      - k
      - model_class
      - model_id
      - num_features
      - score_func
      - train_acc
    properties:
      model_id:
        type: string
        title: Model ID
        description: The ID of the created model
      train_acc:
        type: number
        title: Training accuracy
        description: Model accuracy tested on training set
        minimum: 0
        maximum: 1
      valid_acc:
        type: number
        title: Validation accuracy
        description: Model accuracy tested on validation set
        minimum: 0
        maximum: 1
      model_class:
        type: string
        title: Model class
        description: The name of the model class
        example: logistic
        enum:
          - logistic
          - linear
      score_func:
        type: string
        title: Score function
        description: The score function to use to select features
        example: f_regression
        enum:
          - f_regression
          - mutual_info_regression
          - f_classif
          - mutual_info_classif
          - chi2
      num_features:
        type: integer
        title: Number of features
        description: The number of features to select for training
        minimum: 1
        maximum: 51
      k:
        type: integer
        title: K-fold cross validation
        description: Value used in K-fold cross validation
        minimum: 2
    type: object
  Applicant:
    required:
      - absences
      - activities
      - address
      - age
      - failures
      - family_rel
      - family_size
      - family_support
      - father_edu
      - father_job
      - free_time
      - going_out
      - guardian
      - health
      - higher
      - internet
      - mother_edu
      - mother_job
      - nursery
      - p_status
      - paid
      - reason
      - romantic
      - school
      - school_support
      - sex
      - study_time
      - travel_time
      - weekend_alcohol
      - workday_alcohol
    properties:
      school:
        type: string
        title: School
        description: Student's school (GP - Gabriel Pereira, MS - Mousinho da Silveira)
        example: GP
        enum:
          - GP
          - MS
      sex:
        type: string
        title: Sex
        description: Student's sex (F - female, M - male)
        example: F
        enum:
          - F
          - M
      age:
        type: integer
        title: Age
        description: Student's age
        minimum: 15
        maximum: 22
      address:
        type: string
        title: Address
        description: Student's home address type (U - urban, R - rural)
        example: U
        enum:
          - U
          - R
      family_size:
        type: string
        title: Family size
        description: Family size (LE3 - <=3, GT3 - >3)
        example: LE3
        enum:
          - LE3
          - GT3
      p_status:
        type: string
        title: P status
        description: Parent's cohabitation status (T - living together, A - apart)
        example: T
        enum:
          - T
          - A
      mother_edu:
        type: integer
        title: Mother's education
        description: Mother's education level (0 - none, 1 - 4th grade, 2 - 5~9th grade, 3 - secondary, 4 - higher)
        minimum: 0
        maximum: 4
      father_edu:
        type: integer
        title: Father's education
        description: Father's education level (0 - none, 1 - 4th grade, 2 - 5~9th grade, 3 - secondary, 4 - higher)
        minimum: 0
        maximum: 4
      mother_job:
        type: string
        title: Mother's job
        description: Mother's job (teacher, health care related, civil services (e.g. administrative or police), at_home or other)
        example: teacher
        enum:
          - teacher
          - health
          - services
          - at home
          - other
      father_job:
        type: string
        title: Father's job
        description: Father's job (teacher, health care related, civil services (e.g. administrative or police), at_home or other)
        example: teacher
        enum:
          - teacher
          - health
          - services
          - at home
          - other
      reason:
        type: string
        title: Reason
        description: Reason to choose this school (close to home, school reputation, course preference or other)
        example: home
        enum:
          - home
          - reputation
          - course
          - other
      guardian:
        type: string
        title: Guardian
        description: Student's guardian (mother, father, or other)
        example: mother
        enum:
          - mother
          - father
          - other
      travel_time:
        type: integer
        title: Travel time
        description: Home to school travel time (1 - <15 min, 2 - 15~30 min, 3 - 30~60 min, 4 - >60 min)
        minimum: 1
        maximum: 4
      study_time:
        type: integer
        title: Study time
        description: Weekly study time (1 - <2 hrs, 2 - 2~5 hrs, 3 - 5~10 hrs, 4 - >10 hrs)
        minimum: 1
        maximum: 4
      failures:
        type: integer
        title: Failures
        description: Number of past class failures
        minimum: 1
        maximum: 4
      school_support:
        type: string
        title: School support
        description: Extra educational support (yes or no)
        example: 'yes'
        enum:
          - 'yes'
          - 'no'
      family_support:
        type: string
        title: Family support
        description: Family educational support (yes or no)
        example: 'yes'
        enum:
          - 'yes'
          - 'no'
      paid:
        type: string
        title: Paid
        description: Extra paid classes within the course subject (yes or no)
        example: 'yes'
        enum:
          - 'yes'
          - 'no'
      activities:
        type: string
        title: Activities
        description: Participated in extra-curricular activities (yes or no)
        example: 'yes'
        enum:
          - 'yes'
          - 'no'
      nursery:
        type: string
        title: Nursery
        description: Attended nursery school (yes or no)
        example: 'yes'
        enum:
          - 'yes'
          - 'no'
      higher:
        type: string
        title: Higher
        description: Wants to take higher education (yes or no)
        example: 'yes'
        enum:
          - 'yes'
          - 'no'
      internet:
        type: string
        title: Internet
        description: Internet access at home (yes or no)
        example: 'yes'
        enum:
          - 'yes'
          - 'no'
      romantic:
        type: string
        title: Romantic
        description: With a romantic relationship (yes or no)
        example: 'yes'
        enum:
          - 'yes'
          - 'no'
      family_rel:
        type: integer
        title: Family relationship
        description: Quality of family relationship
        minimum: 1
        maximum: 5
      free_time:
        type: integer
        title: Free time
        description: Free time after school
        minimum: 1
        maximum: 5
      going_out:
        type: integer
        title: Going out amount
        description: Going out with friends
        minimum: 1
        maximum: 5
      workday_alcohol:
        type: integer
        title: Alcohol (workday)
        description: Workday alcohol consumption
        minimum: 1
        maximum: 5
      weekend_alcohol:
        type: integer
        title: Alcohol (weekend)
        description: Weekend alcohol consumption
        minimum: 1
        maximum: 5
      health:
        type: integer
        title: Health
        description: Current health status
        minimum: 1
        maximum: 5
      absences:
        type: integer
        title: Absences
        description: Number of school absences
        minimum: 0
        maximum: 93
    type: object
  PredictionResult:
    required:
      - model_id
      - success
    properties:
      model_id:
        type: string
        title: Model ID
        description: The ID of the model used to make prediction
      success:
        type: boolean
        title: Predicted success
        description: The success of the given applicant predicted by the model
    type: object
responses:
  ParseError:
    description: When a mask can't be parsed
  MaskError:
    description: When any error occurs on mask
